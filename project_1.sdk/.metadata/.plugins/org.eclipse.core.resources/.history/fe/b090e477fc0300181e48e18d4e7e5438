
/**
 *
 * @file ece544ip_test.c
 *
 * @author Rithvik Mitresh (roy.kravitz@pdx.edu)
 * @author Srivatsa Yogendra (srivatsa@pdx.edu)
 * @copyright Portland State University, 2016
 *
 * This file implements a test program for the Nexys4IO and custom Pmod peripherals
 * used in ECE 544. The peripherals provides access to the Nexys4 pushbuttons
 * and slide switches, the LEDs, the RGB LEDs, and the Seven Segment display
 * on the Digilent Nexys4 board and the PmodOLEDrgb (94 x 64 RGB graphics display)
 * and the PmodENC (rotary encoder + slide swich + pushbutton).
 *
 * The test is basic but covers all of the API functions:
 *	o initialize the Nexys4IO, Pmod drivers and all the other peripherals
 *	o Set the LED's to different values
 *	o Check that the duty cycles can be set for both RGB LEDs
 *	o Write character codes to the digits of the seven segment display banks
 *	o Check that all of the switches and pushbuttons on the Nexys4 can be read
 *	o Performs a basic test on the rotary encoder and pmodOLEDrgb
 *
 * <pre>
 * MODIFICATION HISTORY:
 *
 * Ver   Who  Date     Changes
 * ----- ---- -------- -----------------------------------------------
 * 1.00a	rhk	02-Jul-2016		First release of test program.  Builds on the ece544 peripheral test used
 *							to check the functionality of Nexys4IO adn PMod544IOR2
 * 2.00a sy  14-Oct-2016		Modified the code to include different initialize function for other peripherals
 *							connected to the system.
 * 2.01a rk	10-Jan-2018		MB_Sleep() has been deprecated.  Replaced w/ usleep(msecs * 1000)
 * </pre>
 *
 * @note
 * The minimal hardware configuration for this test is a Microblaze-based system with at least 32KB of memory,
 * an instance of Nexys4IO, an instance of the pmodOLEDrgb AXI slave peripheral, and instance of the pmodENC AXI
 * slave peripheral, an instance of AXI GPIO, an instance of AXI timer and an instance of the AXI UARTLite
 * (used for xil_printf() console output)
 *
 * @note
 * The driver code and test application(s) for the pmodOLDrgb are based on code provided by Digilent, Inc.
 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "platform.h"
#include "xparameters.h"
#include "xstatus.h"
#include "microblaze_sleep.h"
#include "nexys4IO.h"
#include "pmodOLEDrgb.h"
#include "pmodENC.h"
#include "xgpio.h"
#include "xintc.h"
#include "xtmrctr.h"

/************************** Constant Definitions ****************************/

// Clock frequencies
#define CPU_CLOCK_FREQ_HZ		XPAR_CPU_CORE_CLOCK_FREQ_HZ
#define AXI_CLOCK_FREQ_HZ		XPAR_CPU_M_AXI_DP_FREQ_HZ

// AXI timer parameters
#define AXI_TIMER_DEVICE_ID		XPAR_AXI_TIMER_0_DEVICE_ID
#define AXI_TIMER_BASEADDR		XPAR_AXI_TIMER_0_BASEADDR
#define AXI_TIMER_HIGHADDR		XPAR_AXI_TIMER_0_HIGHADDR
#define TmrCtrNumber			0


// Definitions for peripheral NEXYS4IO
#define NX4IO_DEVICE_ID		XPAR_NEXYS4IO_0_DEVICE_ID
#define NX4IO_BASEADDR		XPAR_NEXYS4IO_0_S00_AXI_BASEADDR
#define NX4IO_HIGHADDR		XPAR_NEXYS4IO_0_S00_AXI_HIGHADDR

// Definitions for peripheral PMODOLEDRGB
#define RGBDSPLY_DEVICE_ID		XPAR_PMODOLEDRGB_0_DEVICE_ID
#define RGBDSPLY_GPIO_BASEADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_BASEADDR
#define RGBDSPLY_GPIO_HIGHADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_HIGHADD
#define RGBDSPLY_SPI_BASEADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_BASEADDR
#define RGBDSPLY_SPI_HIGHADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_HIGHADDR

// Definitions for peripheral PMODENC
#define PMODENC_DEVICE_ID		XPAR_PMODENC_0_DEVICE_ID
#define PMODENC_BASEADDR		XPAR_PMODENC_0_S00_AXI_BASEADDR
#define PMODENC_HIGHADDR		XPAR_PMODENC_0_S00_AXI_HIGHADDR

// Fixed Interval timer - 100 MHz input clock, 40KHz output clock
// FIT_COUNT_1MSEC = FIT_CLOCK_FREQ_HZ * .001
#define FIT_IN_CLOCK_FREQ_HZ	CPU_CLOCK_FREQ_HZ
#define FIT_CLOCK_FREQ_HZ		40000
#define FIT_COUNT				(FIT_IN_CLOCK_FREQ_HZ / FIT_CLOCK_FREQ_HZ)
#define FIT_COUNT_1MSEC			40

// GPIO 0 parameters
#define GPIO_0_DEVICE_ID			XPAR_AXI_GPIO_0_DEVICE_ID
#define GPIO_0_INPUT_0_CHANNEL		1
#define GPIO_0_OUTPUT_0_CHANNEL		2

//GPIO 1 parameters
#define GPIO_1_DEVICE_ID 	        XPAR_AXI_GPIO_1_DEVICE_ID
#define GPIO_1_INPUT_1_CHANNEL       1                                //This gpio is for red colour
#define GPIO_1_INPUT_2_CHANNEL       2

//GPIO 2 parameters
#define GPIO_2_DEVICE_ID 	        XPAR_AXI_GPIO_2_DEVICE_ID
#define GPIO_2_INPUT_1_CHANNEL       1                               //This gpio is for blue colour
#define GPIO_2_INPUT_2_CHANNEL       2

//GPIO 3 parameters
#define GPIO_3_DEVICE_ID 	        XPAR_AXI_GPIO_3_DEVICE_ID
#define GPIO_3_INPUT_1_CHANNEL       1                               //This gpio is for green colour
#define GPIO_3_INPUT_2_CHANNEL       2

// Interrupt Controller parameters
#define INTC_DEVICE_ID			XPAR_INTC_0_DEVICE_ID
#define FIT_INTERRUPT_ID		XPAR_MICROBLAZE_0_AXI_INTC_FIT_TIMER_0_INTERRUPT_INTR

/**************************** Type Definitions ******************************/

/***************** Macros (Inline Functions) Definitions ********************/

/************************** Variable Definitions ****************************/
// Microblaze peripheral instances
uint64_t 	timestamp = 0L;
PmodOLEDrgb	pmodOLEDrgb_inst;
PmodENC 	pmodENC_inst;
XGpio		GPIOInst0,GPIOInst1,GPIOInst2,GPIOInst3;					// GPIO instance
XIntc 		IntrptCtlrInst;				// Interrupt Controller instance
XTmrCtr		AXITimerInst;				// PWM timer instance
typedef struct{
	uint16_t hueReading;
	uint8_t satReading;
	uint8_t  valReading;
	}Hsv;                                // Structure that holds the hsv value;
typedef struct{
	uint16_t volatile high_time;
	uint16_t volatile low_time;
}Timer;
typedef struct{
Timer volatile colour_time;
Timer volatile timer;
uint32_t volatile total_time;
uint32_t volatile prev_gpio_in;
}Time;                                 // Structure to hold the high and the low time
Time volatile r_colour_time,g_colour_time,b_colour_time,r_colour_time_hardware,g_colour_time_hardware,b_colour_time_hardware; //variables to hold high and low time during software and hardware pulse width detection
u32 duty_cycle_red;
u32 duty_cycle_blue;                   // holds the duty cycle of the rgb led
u32 duty_cycle_green;



// The following variables are shared between non-interrupt processing and
// interrupt processing such that they must be global(and declared volatile)
// These variables are controlled by the FIT timer interrupt handler


volatile u32			gpio_in;			// GPIO input port


/************************** Function Prototypes *****************************/
void PMDIO_itoa(int32_t value, char *string, int32_t radix);
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num);
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix);
int	 do_init(void);											// initialize system
void FIT_Handler(void);										// fixed interval timer interrupt handler
int AXI_Timer_initialize(void);
void operations(void);
Time pulse_width_detection(Time temp_colour_time,int numb);

/************************** MAIN PROGRAM ************************************/
int main(void)
{
	init_platform();

	uint32_t sts;

	sts = do_init();
	if (XST_SUCCESS != sts)
	{
		exit(1);
	}

	// start the PWM timer and kick of the processing by enabling the Microblaze interrupt
	//PWM_SetParams(&PWMTimerInst, pwm_freq, pwm_duty);
	//PWM_Start(&PWMTimerInst);
	microblaze_enable_interrupts();

	xil_printf("ECE 544 Colorwheel implementation\n\r");
	xil_printf("By Srivatsa Yogendra. 22-Aug-2016\n\n\r");


	RunTest4();

	timestamp = 0;

	xil_printf("Starting Test 5...the buttons and switch test\n");
	xil_printf("Press the center pushbutton to exit\n");



	// cleanup and exit
	cleanup_platform();
	exit(0);
}

/****************************************************************************/
/**
 * operations - Performs various operations listed below by using the pmodENC and push buttons, and displays the corresponding Hue,Saturation and
 * Value on the pmodOLEDrgb display.
 *
 * Performs the following operations
 * 	1.	Press the rotary encoder pushbutton to exit.
 * 	2.	Press BtnUp to increase the  value count.
 *  3.  Press BtnD  to decrease the value count.
 * 	4.  Press BtnR to increase the saturation count.
 *  5.  Press BTNL to decrease the saturation count.
 *	6.	Rotating the knob in pmodENC to the right(increases the Hue value) or to the left(decreases the Hue value).
 * 	7.	The screen will be cleared in about 5 seconds.
 *
 *
 * @param	*NONE*
 *
 * @return	*NONE*
 *
 *****************************************************************************/
void operations(void)
{
	uint16_t sw;
	Hsv curHsv={.hueReading=0,.satReading=0,.valReading=0},preHsv={.hueReading=360,.satReading=255,.valReading=255};
	bool isChanged=true;
	char s[] = " End Test 4 ";
    pmodENC_init(&pmodENC_inst,1,false);
	pmodENC_clear_count(&pmodENC_inst);
	OLEDrgb_Clear(&pmodOLEDrgb_inst);
	OLEDrgb_SetFontColor(&pmodOLEDrgb_inst,OLEDrgb_BuildRGB(0,255,0));
	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 1);
	OLEDrgb_PutString(&pmodOLEDrgb_inst,"Hue:");
	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 3);
	OLEDrgb_PutString(&pmodOLEDrgb_inst,"Sat:");
	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 5);
	OLEDrgb_PutString(&pmodOLEDrgb_inst,"Val:");

	while(1) {
		// check if the rotary encoder pushbutton or BTNC is pressed
		// exit the loop if either one is pressed.
		u16 switches_status=NX4IO_getSwitches();
		NX4IO_setLEDs(switches_status);
		bool isHardware_detection=switches_status&1;
		if ( pmodENC_is_button_pressed(&pmodENC_inst) )
		{
			break;
		}

		if (NX4IO_isPressed(BTNC))
		{
			break;
		}

		// increases the value reading
		if (NX4IO_isPressed(BTNU))
		{
			if(curHsv.valReading==100){
				curHsv.valReading=0;
				continue;
			}
			curHsv.valReading++;

		}
		// decreases the value reading
		else if(NX4IO_isPressed(BTND)){
			if(curHsv.valReading==0){
				curHsv.valReading=100;
				continue;
			}
			curHsv.valReading--;

		}
		// increases the saturation reading
		else if (NX4IO_isPressed(BTNR))
		{

            if(curHsv.satReading==100){
            	curHsv.satReading=0;
            	continue;
            }
			curHsv.satReading++;


		}
		// decreases the saturation reading
		else if (NX4IO_isPressed(BTNL))
		{

			if(curHsv.satReading==0){
				curHsv.satReading=100;
				continue;
			}
			curHsv.satReading--;
		}
		else
		{
			// No buttons pressed - no state to change
		}

	    // get the rotary count
		pmodENC_read_count(&pmodENC_inst, &curHsv.hueReading);
		if (curHsv.hueReading!=preHsv.hueReading)
		{
			// rotary count changed so update display
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 1);
			OLEDrgb_PutString(&pmodOLEDrgb_inst,"         ");
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 1);
			PMDIO_putnum(&pmodOLEDrgb_inst, curHsv.hueReading, 10);
			//NX4IO_SSEG_putU32Dec(curHsv.hueReading, true);
			isChanged=true;
			preHsv.hueReading=curHsv.hueReading;
		}
		if(curHsv.satReading!=preHsv.satReading){
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 3);
			OLEDrgb_PutString(&pmodOLEDrgb_inst,"         ");
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 3);
			PMDIO_putnum(&pmodOLEDrgb_inst,curHsv.satReading, 10);
			if(isChanged==false)
			   isChanged=true;
			preHsv.satReading=curHsv.satReading;
		}
		if(curHsv.valReading!=preHsv.valReading){
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 5);
			OLEDrgb_PutString(&pmodOLEDrgb_inst,"         ");
			OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 4, 5);
			PMDIO_putnum(&pmodOLEDrgb_inst, curHsv.valReading, 10);
			if(isChanged==false)
				isChanged=true;
			preHsv.valReading=curHsv.valReading;
		}
		if(isChanged){
		uint16_t rgb_565=OLEDrgb_BuildHSV((curHsv.hueReading/360.0)*255,(curHsv.satReading/100.0)*255,(curHsv.valReading/100.0)*255);
		OLEDrgb_DrawRectangle(&pmodOLEDrgb_inst,70,70,95,95,OLEDrgb_BuildRGB(255, 255, 255),true,rgb_565);
		NX4IO_RGBLED_setChnlEn(RGB1, true, true, true);
		NX4IO_RGBLED_setChnlEn(RGB2, true, true, true);
		NX4IO_RGBLED_setDutyCycle(RGB1, OLEDrgb_ExtractRFromRGB(rgb_565)<<3,OLEDrgb_ExtractGFromRGB(rgb_565)<<2,OLEDrgb_ExtractBFromRGB(rgb_565)<<3);
		usleep(2*1000);
	    NX4IO_RGBLED_setDutyCycle(RGB2, OLEDrgb_ExtractRFromRGB(rgb_565)<<3,OLEDrgb_ExtractGFromRGB(rgb_565)<<2,OLEDrgb_ExtractBFromRGB(rgb_565)<<3);
		//NX4IO_RGBLED_setDutyCycle(RGB1,0,0,255);
	    xil_printf("blue high value is %d\n",XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_1_CHANNEL));
	    			    xil_printf("blue low value is %d\n",XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_2_CHANNEL));
	    			    xil_printf("gpio %d",XGpio_DiscreteRead(&GPIOInst0,GPIO_0_INPUT_0_CHANNEL));

		isChanged=false;
		}
		if(!isHardware_detection){
			    duty_cycle_red=((r_colour_time.total_time==0)?0:(r_colour_time.colour_time.high_time*100)/r_colour_time.total_time);
			    duty_cycle_green=((g_colour_time.total_time==0)?0:(g_colour_time.colour_time.high_time*100)/g_colour_time.total_time);
			    duty_cycle_blue=((b_colour_time.total_time==0)?0:(b_colour_time.colour_time.high_time*100)/b_colour_time.total_time);
			    }
			    else{
			    	r_colour_time_hardware.colour_time.high_time=XGpio_DiscreteRead(&GPIOInst1,GPIO_1_INPUT_1_CHANNEL);
			    	g_colour_time_hardware.colour_time.high_time=XGpio_DiscreteRead(&GPIOInst3,GPIO_3_INPUT_1_CHANNEL);
			    	b_colour_time_hardware.colour_time.high_time=XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_1_CHANNEL);
			    	r_colour_time_hardware.colour_time.low_time=XGpio_DiscreteRead(&GPIOInst1,GPIO_1_INPUT_2_CHANNEL);
			        g_colour_time_hardware.colour_time.low_time=XGpio_DiscreteRead(&GPIOInst3,GPIO_3_INPUT_2_CHANNEL);
			        b_colour_time_hardware.colour_time.low_time=XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_2_CHANNEL);
			        r_colour_time_hardware.total_time=r_colour_time_hardware.colour_time.high_time+r_colour_time_hardware.colour_time.low_time;
			        g_colour_time_hardware.total_time=g_colour_time_hardware.colour_time.high_time+g_colour_time_hardware.colour_time.low_time;
			        b_colour_time_hardware.total_time=b_colour_time_hardware.colour_time.high_time+b_colour_time_hardware.colour_time.low_time;
			        duty_cycle_red=((r_colour_time_hardware.total_time==0)?0:(r_colour_time_hardware.colour_time.high_time*100)/r_colour_time_hardware.total_time);
			        duty_cycle_green=((g_colour_time_hardware.total_time==0)?0:(g_colour_time_hardware.colour_time.high_time*100)/g_colour_time_hardware.total_time);
			        duty_cycle_blue=((b_colour_time_hardware.total_time==0)?0:(b_colour_time_hardware.colour_time.high_time*100)/b_colour_time_hardware.total_time);
			    }

			    NX410_SSEG_setAllDigits(SSEGHI,((u32)duty_cycle_red/10),((u32)duty_cycle_red)%10,CC_BLANK,((u32)duty_cycle_green/10),DP_NONE);
			    NX410_SSEG_setAllDigits(SSEGLO,((u32)duty_cycle_green%10),CC_BLANK,((u32)duty_cycle_blue/10),((u32)duty_cycle_blue%10),DP_NONE);
    } // rotary button has been pressed - exit the loop

	// Writing a thank you note after exiting the loop
	OLEDrgb_Clear(&pmodOLEDrgb_inst);
	OLEDrgb_PutChar(&pmodOLEDrgb_inst,"Thank you for see the program. \n Hoping to see you soon.";
	usleep(5000 * 1000);
	OLEDrgb_Clear(&pmodOLEDrgb_inst);
    return;
}

/**************************** HELPER FUNCTIONS ******************************/

/****************************************************************************/
/**
 * initialize the system
 *
 * This function is executed once at start-up and after resets.  It initializes
 * the peripherals and registers the interrupt handler(s)
 *****************************************************************************/

int	 do_init(void)
{
	uint32_t status;				// status from Xilinx Lib calls

	// initialize the Nexys4 driver and (some of)the devices
	status = (uint32_t) NX4IO_initialize(NX4IO_BASEADDR);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}
    // initializing pmodOLEDrgb
    OLEDrgb_begin(&pmodOLEDrgb_inst, RGBDSPLY_GPIO_BASEADDR, RGBDSPLY_SPI_BASEADDR);

	// initialize the pmodENC and hardware
	status = pmodENC_initialize(&pmodENC_inst, PMODENC_BASEADDR);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	// initialize the GPIO instances
	status = XGpio_Initialize(&GPIOInst0, GPIO_0_DEVICE_ID);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	// initialize the GPIO  for red colour
	status=XGpio_Initialize(&GPIOInst1, GPIO_1_DEVICE_ID);
	if (status != XST_SUCCESS)
	{
		 return XST_FAILURE;
	}

	// initialize the GPIO for blue colour
	status=XGpio_Initialize(&GPIOInst2, GPIO_2_DEVICE_ID);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	//initialize the GPIO for green colour
	status=XGpio_Initialize(&GPIOInst3, GPIO_3_DEVICE_ID);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}
	// GPIO0 channel 1 is an 8-bit input port.
	// GPIO0 channel 2 is an 8-bit output port.
	XGpio_SetDataDirection(&GPIOInst0, GPIO_0_INPUT_0_CHANNEL, 0xFF);
	XGpio_SetDataDirection(&GPIOInst0, GPIO_0_OUTPUT_0_CHANNEL, 0x00);

	//GPIO1,2,3 is a 16-bit input ports.
	XGpio_SetDataDirection(&GPIOInst1,GPIO_1_INPUT_1_CHANNEL,0xFFFF);
	XGpio_SetDataDirection(&GPIOInst1,GPIO_1_INPUT_2_CHANNEL,0xFFFF);      //Contains red high time and low time input port

	XGpio_SetDataDirection(&GPIOInst2,GPIO_2_INPUT_1_CHANNEL,0xFFFF);
	XGpio_SetDataDirection(&GPIOInst2,GPIO_2_INPUT_2_CHANNEL,0xFFFF);      //Contains blue high time and low time input port

	XGpio_SetDataDirection(&GPIOInst3,GPIO_3_INPUT_1_CHANNEL,0xFFFF);
	XGpio_SetDataDirection(&GPIOInst3,GPIO_3_INPUT_2_CHANNEL,0xFFFF);      //Contains green high time and low time input port


	status = AXI_Timer_initialize();
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	// initialize the interrupt controller
	status = XIntc_Initialize(&IntrptCtlrInst, INTC_DEVICE_ID);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	// connect the fixed interval timer (FIT) handler to the interrupt
	status = XIntc_Connect(&IntrptCtlrInst, FIT_INTERRUPT_ID,
			(XInterruptHandler)FIT_Handler,
			(void *)0);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;

	}

	// start the interrupt controller such that interrupts are enabled for
	// all devices that cause interrupts.
	status = XIntc_Start(&IntrptCtlrInst, XIN_REAL_MODE);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	// enable the FIT interrupt
	XIntc_Enable(&IntrptCtlrInst, FIT_INTERRUPT_ID);
	return XST_SUCCESS;
}
/*
 * AXI timer initializes it to generate out a 4Khz signal, Which is given to the Nexys4IO module as clock input.
 * DO NOT MODIFY
 */
int AXI_Timer_initialize(void){

	uint32_t status;				// status from Xilinx Lib calls
	u32		ctlsts;		// control/status register or mask

	status = XTmrCtr_Initialize(&AXITimerInst,AXI_TIMER_DEVICE_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	status = XTmrCtr_SelfTest(&AXITimerInst, TmrCtrNumber);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	ctlsts = XTC_CSR_AUTO_RELOAD_MASK | XTC_CSR_EXT_GENERATE_MASK | XTC_CSR_LOAD_MASK |XTC_CSR_DOWN_COUNT_MASK ;
	XTmrCtr_SetControlStatusReg(AXI_TIMER_BASEADDR, TmrCtrNumber,ctlsts);

	//Set the value that is loaded into the timer counter and cause it to be loaded into the timer counter
	XTmrCtr_SetLoadReg(AXI_TIMER_BASEADDR, TmrCtrNumber, 24998);
	XTmrCtr_LoadTimerCounterReg(AXI_TIMER_BASEADDR, TmrCtrNumber);
	ctlsts = XTmrCtr_GetControlStatusReg(AXI_TIMER_BASEADDR, TmrCtrNumber);
	ctlsts &= (~XTC_CSR_LOAD_MASK);
	XTmrCtr_SetControlStatusReg(AXI_TIMER_BASEADDR, TmrCtrNumber, ctlsts);

	ctlsts = XTmrCtr_GetControlStatusReg(AXI_TIMER_BASEADDR, TmrCtrNumber);
	ctlsts |= XTC_CSR_ENABLE_TMR_MASK;
	XTmrCtr_SetControlStatusReg(AXI_TIMER_BASEADDR, TmrCtrNumber, ctlsts);

	XTmrCtr_Enable(AXI_TIMER_BASEADDR, TmrCtrNumber);
	return XST_SUCCESS;

}

/**************************** INTERRUPT HANDLERS ******************************/

/****************************************************************************/
/**
 * Fixed interval timer interrupt handler
 *
 * Reads the GPIO port which reads back the hardware generated PWM wave for the RGB Leds
 *****************************************************************************/
void FIT_Handler(void)
{
	// Read the GPIO port to read back the generated PWM signal for RGB led's
	gpio_in = XGpio_DiscreteRead(&GPIOInst0, GPIO_0_INPUT_0_CHANNEL);
	r_colour_time=pulse_width_detection(r_colour_time,4);
	g_colour_time=pulse_width_detection(g_colour_time,1);
	b_colour_time=pulse_width_detection(b_colour_time,2);


}

/****************************  PULSE WIDTH DETECTION **********************************/

/**************************************************************************************/
/**
 * Calculates the high time and low time for a PWM signal using a reference clock
 *
 *@param temp_colour_time is a structure of type Time which holds the high time, low time and total time for a particular colour
 *@param numb it is the number corresponding to the particular colour in gpio_in
 *@return temp_colour_time is the same structure, which we got as parameter. We are calculating the high time , low time and total time, and assigning
 * back to the same variable.
**/
Time pulse_width_detection(Time temp_colour_time,int numb){
	if((gpio_in&numb)==numb&&temp_colour_time.prev_gpio_in==0){
			++temp_colour_time.timer.high_time;
			return temp_colour_time;
		}
		if(temp_colour_time.prev_gpio_in==0&&temp_colour_time.timer.high_time>0){
		temp_colour_time.colour_time.high_time=temp_colour_time.timer.high_time;
		temp_colour_time.timer.high_time=0;
		temp_colour_time.prev_gpio_in=numb;
		}
	    if((gpio_in&numb)==0&&temp_colour_time.prev_gpio_in==numb){
	       ++temp_colour_time.timer.low_time;
	       return temp_colour_time;
	    }
	    if(temp_colour_time.prev_gpio_in==numb){
	     temp_colour_time.colour_time.low_time=temp_colour_time.timer.low_time;
	     temp_colour_time.timer.low_time=0;
	     temp_colour_time.prev_gpio_in=0;
	    }
	    temp_colour_time.total_time=temp_colour_time.colour_time.high_time+temp_colour_time.colour_time.low_time;
        return temp_colour_time;
	}


